#!/bin/bash
# script to list all UniFi devices from the given controller and get some infos https://github.com/binarybear-de/cmk_check_unifi-controller
# version 2020-08-17

###############################################################

# Settings for the controller-binding
USERNAME=user
PASSWORD=pass
BASEURL=https://demo.ui.com

# Only set site if you DONT want them to be autodetected!
#SITES=office

# additional curl options
# - insecure-flag is needed if a self-signed certificate is used and is not imported in linux - usually okay if controller is running locally
# - enforce a specific version of TLS

###############################################################

getValue() {
	SERIAL=$1
	QUERY=$2
	Q1=" .data | .[] | select(.serial | contains($SERIAL))"
	Q2=" $QUERY "
	local VALUE=$(cat $DEVICES_FILE | jq "$Q1" | jq $Q2)
	echo $VALUE
}

# define temporary files
FILE_SUFFIX=$$ #random seed (mainly to keep the suffix the same for debugging purposes)
FILE_PREFIX=/tmp/unifi-check

DEVICES_FILE=$FILE_PREFIX-devices-$RND_SEED #file for a list of all devices
SITES_FILE=$FILE_PREFIX-sites-$RND_SEED #file with list of all sites
COOKIE_FILE=$FILE_PREFIX-cookie-$RwND_SEED #cookie for the logged in session
CURL_CMD="curl --silent --cookie ${COOKIE_FILE} --cookie-jar ${COOKIE_FILE} $CURLOPTS" #the curl command used to pull the data from the WebUI

# create the temporary files
rm -f $DEVICES_FILE $COOKIE_FILE $SITES_FILE #remove them if they already exist
touch $DEVICES_FILE $COOKIE_FILE $SITES_FILE #create a empty file
chmod 600 $DEVICES_FILE $COOKIE_FILE $SITES_FILE #set permissions strictly

###############################################################

${CURL_CMD} --data "{\"username\":\"$USERNAME\", \"password\":\"$PASSWORD\"}" $BASEURL/api/login > /dev/null #login to the controller

if ! [ $SITES ]; then
	${CURL_CMD} $BASEURL/api/self/sites > $SITES_FILE #write found sites to file
	SITES_NAME=$(cat $SITES_FILE | jq '.data | .[] | .name') #gets all site names
	SITES=$(echo $SITES_NAME | sed -e 's/"//g')
fi

# loop over all sites
for SITE in $SITES; do
	countSites=$((countSites+1))
	${CURL_CMD} --data "{}" $BASEURL/api/s/$SITE/stat/device > $DEVICES_FILE #get all devices on that site
	SERIALS=$(cat $DEVICES_FILE | jq '.data | .[] | .serial') # iterate over the acquired serials
	for S in $SERIALS; do
		DEVICE_NAME=$(getValue $S .name | sed -e 's/"//g; s/\ /_/g')
		MODEL=$(getValue $S .model | sed -e 's/"//g; s/\ /_/g')
		if [ $DEVICE_NAME == "null" ]; then
			echo "da sind geräte ohne NAMEN!!!!"
			NONAME=1
		elif [[ $MODEL == US* ]]; then
			countSwitches=$((countSwitches+1))
		elif [[ $MODEL == U7* ]]; then
			countAccessPoints=$((countAccessPoints+1))
		else
			echo "Unbekanntes Gerät: $MODEL"
			FAILURE=1
		fi

		if [ NONAME = 1 ]; then
			echo "Es wurden Geräte ausgenommen, deren Name 'null' ist. Diese Geräte sind entweder nicht benannt oder noch nicht korrekt adoptiert (hier werden sie 1x pro Site gezählt!)"
		fi
		if [ FAILURE = 1 ]; then
			echo "Einige Geräte konnten nicht korrekt identifiziert werden (siehe oben!)"
		fi
#echo $countAccessPoints
#echo $countSwitches

  done
 # loop over all serial numbers (devices) on current site
done
echo $countAccessPoints "APs"
echo $countSwitches "Switches"
echo "=================="
echo $(($countSwitches + $countAccessPoints)) "Geräte insgesamt"
echo $countSites "Sites"

${CURL_CMD} $BASEURL/logout #finally close the session
rm -f $DEVICES_FILE $COOKIE_FILE $SITES_FILE # clean temporary files from earlier
